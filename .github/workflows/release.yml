name: Release

on:
  push:
    tags:
      - v[0-9]+.*

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check package version
        run: |
          version=$(cargo pkgid | cut -d# -f2)
          tag="${GITHUB_REF#refs/tags/}"
          if [ "v$version" != "$tag" ]; then
            echo "Package version ($version) does not match tag ($tag)"
            exit 1
          fi
      
      - name: Publish
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-release:
    name: Build Release Binary
    needs: [create-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # x86_64 targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: compiledb
            asset_name: compiledb-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: compiledb.exe
            asset_name: compiledb-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: compiledb
            asset_name: compiledb-macos-amd64
          
          # ARM64 targets
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: compiledb
            asset_name: compiledb-linux-arm64
            extra_deps: gcc-aarch64-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: compiledb
            asset_name: compiledb-macos-arm64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: compiledb.exe
            asset_name: compiledb-windows-arm64.exe

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation dependencies
        if: matrix.extra_deps != ''
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y ${{ matrix.extra_deps }}
          fi
        shell: bash
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Prepare asset
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/${{ matrix.asset_name }}
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: release/${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
