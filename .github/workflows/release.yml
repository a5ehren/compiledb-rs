name: Release

on:
  push:
    tags:
      - v[0-9]+.*

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    needs: [build-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check package version
        run: |
          version=$(cargo pkgid | cut -d# -f2)
          tag="${GITHUB_REF#refs/tags/}"
          if [ "v$version" != "$tag" ]; then
            echo "Package version ($version) does not match tag ($tag)"
            exit 1
          fi
      
      - name: Publish
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  build-release:
    name: Build Release Binary
    needs: [create-release]
    strategy:
      fail-fast: false
      matrix:
        info:
          - {
              os: "ubuntu-latest",
              target: "x86_64-unknown-linux-gnu",
              cross: false,
              artifact_name: compiledb,
              asset_name: compiledb-linux-amd64
            }
          - {
              os: "ubuntu-24.04-arm",
              target: "aarch64-unknown-linux-gnu",
              cross: false,
              artifact_name: compiledb,
              asset_name: compiledb-linux-arm64
            }
          - { os: "macos-latest",
              target: "aarch64-apple-darwin",
              cross: false,
              artifact_name: compiledb,
              asset_name: compiledb-macos-arm64
            }
          - {
              os: "windows-latest",
              target: "x86_64-pc-windows-msvc",
              cross: false,
              artifact_name: compiledb.exe,
              asset_name: compiledb-windows-amd64.exe
            }
    runs-on: ${{ matrix.info.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain with caching
        uses: brndnmtthws/rust-action@v1
        with:
          toolchain: stable
      
      # don't actually need this at the moment as github now has native arm runners
      # keep it here so that I can do riscv in a few years if I want to
      - name: Install cross
        if: ${{ matrix.info.cross }}
        run: RUSTFLAGS="" cargo install cross --git https://github.com/cross-rs/cross --branch main
      
      - name: Build
        run: |
          cd ${{ github.workspace }}
          if [[ ${{ matrix.info.cross }} == "true" ]]; then
            cross build --release --target ${{ matrix.info.target }} --locked --bins --all-features
          else
            cargo build --release --locked --bins --all-features
          fi
      
      - name: Copy files
        run: |
          mkdir -p ${{ github.workspace }}/release
          cp ${{ github.workspace }}/target/release/${{ matrix.info.artifact_name }} ${{ github.workspace }}/release/${{ matrix.info.asset_name }}
      
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: release/${{ matrix.info.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
